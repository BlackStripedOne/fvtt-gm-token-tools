const e={ID:"gm-token-tools",NAME:"Gamemaster Token Tools for DSA5",LCCNAME:"gmTokenTools"};class Logger{static info(t,o=!1){console.log(e.NAME+` Info | ${t}`),o&&ui.notifications.info(e.NAME+` | ${t}`)}static error(t,o=!1){console.error(e.NAME+` Error | ${t}`),o&&ui.notifications.error(e.NAME+` | ${t}`)}static debug(t,o){if(game.gmTokenTools?game.gmTokenTools.isDebug:Utils.getSetting("debug",!1)){if(!o)return void console.log(e.NAME+` Debug | ${t}`);const i=Utils.deepClone(o);console.log(e.NAME+` Debug | ${t}`,i)}}}class Utils{static isBitSet(e,t){return 0!=(e&1<<t)}static deepClone(e,t){return deepClone(e,t)}static getActor(e,t){let o=null;return t&&(o=canvas.tokens.placeables.find((e=>e.id===t))),o?o.actor:game.actors.get(e)}static getItem(e,t){return e.items.get(t)}static getToken(e){return canvas.tokens.placeables.find((t=>t.id===e))}static getControlledTokens(){return game.canvas.tokens.controlled}static getControlledToken(){return game.canvas.tokens.controlled[0]}static getUserByTokenId(e){let t,o=e.actor.ownership;return game.users.forEach((e=>{null!==e.character&&e.active&&o[e._id]>0&&(t=e)})),t}static getSetting(t,o=null){let i=o??null;try{i=game.settings.get(e.ID,t)}catch{console.log(e.NAME+` Debug | GameConfig '${t}' not found`)}return i}static async setSetting(t,o){game.settings.settings.get(`${e.ID}.${t}`)?(await game.settings.set(e.ID,t,o),Logger.debug(`GameConfig '${t}' set to '${o}'`)):Logger.debug(`GameConfig '${t}' not found`)}static getUserFlag(t){return game.user.getFlag(e.ID,t)}static async setUserFlag(t,o){await game.user.setFlag(e.ID,t,o)}static async unsetUserFlag(t){await game.user.unsetFlag(e.ID,t)}static i18n(t,o=null){let i=game.i18n.localize(e.LCCNAME+"."+t);return i==e.LCCNAME+"."+t?(null==o&&(i=e.LCCNAME+"."+t),i):i}static isModuleActive(e){const t=game.modules.get(e);return t&&t.active}}const t={damageTypes:{fall:{name:"Sturzschaden",description:"Sturzschaden kann durch eine erfolgreiche Probe auf Körperbeherrschung(Springen) um QS verringert werden.",options:{hight:{label:"damage.fall.hight.label",unit:"damage.fall.hight.unit",type:"number",range:{min:1,max:20},default:1,format:"{{value}}d6[black]"},impact:{label:"Untergrund Modifikator",unit:"SP",type:"chooseOne",options:{0:{name:"Normaler Boden (+/-0)",value:"0"},1:{name:"Fester Boden (+1)",value:"1",modText:"Fester Boden: +1 SP"},2:{name:"Harter Boden (+2)",value:"2",modText:"Harder Boden: +2 SP"},3:{name:"Sehr harter Boden (+3)",value:"3",modText:"Sehr harter Boden: +3 SP"},4:{name:"Schädigender Boden (+4)",value:"4",modText:"Schädigender Boden: +4 SP"},"-1":{name:"Loser Boden (-1)",value:"-1",modText:"Loser Boden: -1 SP"},"-2":{name:"Weicher Boden (-2)",value:"-2",modText:"Weicher Boden: -2 SP"},"-3":{name:"Sehr weicher Boden (-3)",value:"-3",modText:"Sehr weicher Boden: -3 SP"},"-4":{name:"Falldämpfender Boden (-4)",value:"-4",modText:"Falldämpfender Boden: -4 SP"}},default:"0"}},formula:"@hight + @impact",manualModification:!0},burn:{name:"Feuer- oder Säureschaden",description:"Feuer- oder Säureschaden wird pro Kampfrunde gewürfelt, solange der Held mit Feuer oder der Säre in Kontakt ist.",options:{area:{label:"Betroffener Bereich",type:"chooseOne",options:{small:{name:"Kleine Fläche betroffen",value:"1d3"},medium:{name:"Große Fläche betroffen",value:"1d6"},large:{name:"Ganzer Körper betroffen",value:"2d6"}},format:"{{value}}[black]"},extreme:{label:"Große Hitze oder sehr starke Säure",unit:"SP verdoppelt",type:"boolean",values:{true:{value:2,modText:"Große Hitze/Starke Säure: 2xSP"},false:{value:1}}}},formula:"@area * @extreme",manualModification:!0}}};class GmTokenTools extends Application{async init(){this.updateSettings(),Logger.debug("Application Initialized")}updateSettings(){Logger.debug("Updating Settings..."),this.isDebug=Utils.getSetting("debug"),this.chatToTarget=Utils.getSetting("chatToTarget"),this.defaultAction=Utils.getSetting("defaultAction"),this.ctrlAction=Utils.getSetting("ctrlAction"),this.altAction=Utils.getSetting("altAction"),Logger.debug("Settings Updated")}async rollDamageForToken(e){let t=Utils.getToken(e);if(void 0===t)return;let o=await new Roll("1d6[black]").evaluate({async:!0});game.dice3d?.showForRoll(o),t.actor.applyDamage(o.total);let i=Handlebars.compile(Utils.i18n("actions.damageRoll.chatHb"))({name:t.actor.name,roll:o.total});ChatMessage.create({user:game.user._id,content:i})}requestRoll(e,t,o,i,a){const n=i<0?` ${i}`:i>0?` +${i}`:"",s=game.i18n.format("gmTokenTools.actions.requestRoll",{user:game.user.name,item:`<a class="roll-button request-roll" data-type="${t}" data-modifier="${i}" data-name="${o}"><i class="fas fa-dice"></i> ${o}${n}</a>`});let l={user:game.user._id,content:s};if("alwaysUser"==this.chatToTarget||"shiftEveryoneElseUser"==this.chatToTarget&&!a||"shiftUserElseEveryone"==this.chatToTarget&&a){let t=Utils.getUserByTokenId(e);if(void 0===t)return;mergeObject(l,{whisper:[t]})}ChatMessage.create(l)}async requestRollDialog(t,o,i,a){const n=game.i18n.format("gmTokenTools.actions.requestRollDialog.content",{skill:i}),s=await renderTemplate("modules/"+e.ID+"/templates/requestRollDialog.hbs",{text:n});new game.dsa5.apps.DSA5Dialog({title:Utils.i18n("actions.requestRollDialog.title"),content:s,buttons:{ok:{label:"Ja",callback:e=>{const n=e.find('input[name="entryselection"]').val();this.requestRoll(t,o,i,n,a)}},cancel:{label:"Abbrechen"}}}).render(!0)}async handleRoll(e,t,o,i){let a,n;"attribute"==t?(a=game.dsa5.apps.DSA5_Utility.attributeLocalization(o),n=o):"skill"==t&&(n=await game.dsa5.apps.DSA5_Utility.skillByName(o),a=o);let s="nothing";switch(s=Utils.isBitSet(i,0)?this.ctrlAction:Utils.isBitSet(i,1)?this.altAction:this.defaultAction,s){case"requestRoll":Logger.debug("Requesting roll",{token:e,type:t,id:a,skillAttrObj:n}),this.requestRoll(e,t,a,0,Utils.isBitSet(i,2));break;case"requestRollDialog":Logger.debug("Requesting roll Dialog",{token:e,type:t,id:a,skillAttrObj:n}),this.requestRollDialog(e,t,a,Utils.isBitSet(i,2));break;case"initiateRoll":Logger.debug("Initiae Roll",{token:e,type:t,id:a,skillAttrObj:n}),"skill"==t?e.actor.setupSkill(n,{},e._id).then((t=>{e.actor.basicTest(t)})):"attribute"==t&&e.actor.setupCharacteristic(n,{},e._id).then((t=>{e.actor.basicTest(t)}))}}async doDamageRoll(t,o,i){Logger.debug("doDamageRoll",{token:t,damage:o,options:i});let a={};for(let e in i)a[e]=i[e].val;let n=new Roll(o.formula,a);await n.evaluate({async:!0}),game.dice3d?.showForRoll(n),t.actor.applyDamage(n.total);let s=[],l=n.total;for(let e in n.dice)for(let t=0;t<n.dice[e].number;t++)s.push({die:"d"+n.dice[e].faces,value:n.dice[e].results[t].result}),l-=n.dice[e].results[t].result;let r=[];for(let e in i)void 0!==i[e].mod&&r.push(i[e].mod);const c=await renderTemplate("modules/"+e.ID+"/templates/damageRollResultChat.hbs",{name:t.actor.name,roll:n.total,dice:s,damageType:o.name,modifier:l,modifiers:r});ChatMessage.create({user:game.user._id,content:c})}_collectOptions(e,t){let o,i,a={};for(let n in t.options){let s=t.options[n];switch(a[n]={},s.type){case"number":o=e.find("input#"+n+"[type=number]")?.val(),o=Math.min(Math.max(s.range.min,o),s.range.max),a[n].val=o;break;case"chooseOne":i=e.find("select#"+n+" option:selected"),a[n].val=i.val(),i.attr("data-modtext")&&(a[n].mod=i.attr("data-modtext"));break;case"boolean":i=e.find("input#"+n+"[type=checkbox]"),i.is(":checked")?(a[n].val=s.values.true.value,i.attr("data-modtext")&&(a[n].mod=i.attr("data-modtext"))):a[n].val=s.values.false.value}if(void 0!==s.format){const e=Handlebars.compile(s.format);a[n].val=e({value:a[n].val})}}return a}async handleDamageRoll(e,o,i){if(Logger.debug("handleDamageRoll",{token:e,value:o,mod:i}),void 0===t.damageTypes[o])return;let a=t.damageTypes[o],n="<p>"+a.description+"</p><form>";for(let e in a.options){let t=a.options[e];switch(t.type){case"number":let o=t.range.min,i=t.range.max,a=t.default;n+='<label for="'+e+'">'+t.label+'</label><input id="'+e+'" type="number" name="'+e+'" value="'+a+'" min="'+o+'" max="'+i+'" />'+t.unit;break;case"chooseOne":n+='<label for="'+e+'">'+t.label+"</label>",n+='<select id="'+e+'" name="'+e+'">';for(let e in t.options)n+="<option ",e==t.default&&(n+="selected "),void 0!==t.options[e].modText&&(n+='data-modtext="'+t.options[e].modText+'"'),n+='value="'+t.options[e].value+'">'+t.options[e].name+"</option>";n+="</select>";break;case"boolean":n+=t.label+"<input ",void 0!==t.values.true.modText&&(n+='data-modtext="'+t.values.true.modText+'"'),n+='type="checkbox" id="'+e+'" name="'+e+'" value="true" /><label for="'+e+'">'+t.unit+"</label>";break;default:n+="<div>\x3c!-- unknown option --\x3e</div>"}}n+="</form>",new game.dsa5.apps.DSA5Dialog({title:"Schadensprobe auf "+a.name+" anfordern",content:n,buttons:{ok:{label:"Ja",callback:t=>{this.doDamageRoll(e,a,this._collectOptions(t,a))}},cancel:{label:"Abbrechen"}}}).render(!0)}async addTokenActions(e,o,i){let a=canvas.tokens.get(i._id).actor;if(void 0===a)return;let n=[];for(let e of a.items)switch(e.type){case"adventage":case"disadventage":case"specialability":case"combatskill":break;case"skill":e.system.talentValue.value>0&&n.push({name:e.name,value:e.system.talentValue.value})}let s="",l="";n.sort(((e,t)=>t.value-e.value));for(let e of n)l+='<li onClick="game.gmTokenTools.handleClick(this);" data-id="'+e.name+'">('+e.value+") "+e.name+"</li>";s+='<div class="control-icon token-tool-icon" title="Roll Checks"><i class="fas fa-dice"></i> '+Utils.i18n("actions.skills.name")+'</div><div class="token-tool-list-wrapper"><ul class="token-tool-list" data-type="skill" data-token="'+i._id+'">'+l+"</ul></div>";let r="",c=["mu","kl","in","ch","ff","ge","ko","kk"];for(let e of c)r+='<li onClick="game.gmTokenTools.handleClick(this);" data-id="'+e+'">('+a.system.characteristics[e].value+") "+game.dsa5.apps.DSA5_Utility.attributeLocalization(e)+"</li>";s+='<div class="control-icon token-tool-icon" title="Roll Checks"><i class="fas fa-dice"></i> '+Utils.i18n("actions.attributes.name")+'</div><div class="token-tool-list-wrapper"><ul class="token-tool-list" data-type="attribute" data-token="'+i._id+'">'+r+"</ul></div>";let g="";g+="<li onClick=\"game.gmTokenTools.rollDamageForToken('"+i._id+"'); return false;\">1d6 Schaden</li>";for(let e in t.damageTypes)g+='<li onClick="game.gmTokenTools.handleClick(this);" data-id="'+e+'">'+t.damageTypes[e].name+"</li>";switch(g+="<li onClick=\"game.dsa5.macro.requestRoll('Regeneration', 0);\">Regenerieren</li>",s+='<div class="control-icon token-tool-icon" title="Roll Checks"><i class="fas fa-dice"></i> Specials</div><div class="token-tool-list-wrapper"><ul class="token-tool-list" data-type="damage" data-token="'+i._id+'">'+g+"</ul></div>",s+='<div class="control-icon token-tool-icon token-tool-hint">',"nothing"!=this.defaultAction&&(s+='<i class="fas fa-solid fa-computer-mouse"></i> '+Utils.i18n("settings.actionChoices."+this.defaultAction)+"</br>"),"nothing"!=this.ctrlAction&&(s+='<i class="fas fa-solid fa-computer-mouse"></i>+<span class="key">Ctrl</span> '+Utils.i18n("settings.actionChoices."+this.ctrlAction)+"</br>"),"nothing"!=this.altAction&&(s+='<i class="fas fa-solid fa-computer-mouse"></i>+<span class="key">Alt</span> '+Utils.i18n("settings.actionChoices."+this.altAction)+"</br>"),this.chatToTarget){case"alwaysEveryone":case"alwaysUser":s+='<i class="fas fa-solid fa-comment"></i> '+Utils.i18n("settings.chatToTarget.choices."+this.chatToTarget)+"</br>";break;case"shiftEveryoneElseUser":case"shiftUserElseEveryone":s+='<i class="fas fa-solid fa-comment"></i> '+Utils.i18n("settings.chatToTarget.choices.alwaysUser")+', <span class="key">Shift</span> '+Utils.i18n("settings.chatToTarget.choices.shiftEveryoneElseUser")+"</br>"}s+="</div>";let d=$(`<div class="col token-tool-column-right">${s}</div>`);o.find(".col.right").wrap('<div class="token-tool-container">'),o.find(".col.right").before(d),Logger.debug("Actions injected to token HUD")}async addTokenInfos(e,t,o){let i=Utils.getActor(null,o._id);if(void 0===i)return;let a="",n=i.system.status.speed.max;a+='<div class="control-icon token-tool-icon" title="'+Utils.i18n("infos.speed.name")+": "+n+'"><i class="fas fa-walking"></i> '+n+"</div>";let s="-";s="creature"==i.type?"crt":"npc"==i.type?"npc":"character"==i.type?i.system.details.experience.total:"-",a+='<div class="control-icon token-tool-icon" title="'+Utils.i18n("infos.expTotal.name")+": "+s+'"><i class="fas fa-solid fa-scroll"></i> '+s+"</div>";a+='<div class="control-icon token-tool-icon" title="'+Utils.i18n("infos.acTotal.name")+': 0"><i class="fas fa-shield-alt"></i> 0</div>';let l=$(`<div class="col token-tool-column-left">${a}</div>`);t.find(".col.left").wrap('<div class="token-tool-container">'),t.find(".col.left").before(l),Logger.debug("Infos injected into token HUD")}}class GmTokenToolsApi{isDebug=!1;gmTokenTools=void 0;async init(){this.isDebug=Utils.getSetting("debug"),void 0===this.gmTokenTools&&(this.gmTokenTools=new GmTokenTools,this.gmTokenTools.init()),Logger.info("API Initialized")}updateSettings(){this.gmTokenTools?.updateSettings()}handleClick(e){let t=e.getAttribute("data-id"),o=e.parentElement.getAttribute("data-type"),i=e.parentElement.getAttribute("data-token"),a=Utils.getToken(i);if(void 0===a)return;let n=0;window.event.ctrlKey&&(n+=1),window.event.altKey&&(n+=2),window.event.shiftKey&&(n+=4),"attribute"==o||"skill"==o?this.gmTokenTools?.handleRoll(a,o,t,n):"damage"==o?this.gmTokenTools?.handleDamageRoll(a,t,n):Logger.debug("handleClick(): unknown how to handle parameters",{clickId:t,clickType:o,clickToken:i,modifier:n})}}function onChangeFunction(t){game[e.LCCNAME]&&game[e.LCCNAME].updateSettings()}const registerSettings=function(){game.settings.register(e.ID,"startup",{name:"One-Time Startup Prompt",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register(e.ID,"debug",{name:Utils.i18n("settings.debug.name"),hint:Utils.i18n("settings.debug.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"gmOnly",{name:Utils.i18n("settings.gmOnly.name"),hint:Utils.i18n("settings.gmOnly.hint"),scope:"world",config:!0,default:!0,type:Boolean,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"showCombatSkills",{name:Utils.i18n("settings.showCombatSkills.name"),hint:Utils.i18n("settings.showCombatSkills.hint"),scope:"world",config:!0,default:!1,type:Boolean,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"chatToTarget",{name:Utils.i18n("settings.chatToTarget.name"),hint:Utils.i18n("settings.chatToTarget.hint"),scope:"world",config:!0,type:String,default:"alwaysEveryone",choices:{alwaysEveryone:Utils.i18n("settings.chatToTarget.choices.alwaysEveryone"),alwaysUser:Utils.i18n("settings.chatToTarget.choices.alwaysUser"),shiftEveryoneElseUser:Utils.i18n("settings.chatToTarget.choices.shiftEveryoneElseUser"),shiftUserElseEveryone:Utils.i18n("settings.chatToTarget.choices.shiftUserElseEveryone")},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"defaultAction",{name:Utils.i18n("settings.defaultAction.name"),hint:Utils.i18n("settings.defaultAction.hint"),scope:"world",config:!0,type:String,default:"requestRoll",choices:{nothing:Utils.i18n("settings.actionChoices.nothing"),requestRoll:Utils.i18n("settings.actionChoices.requestRoll"),requestRollDialog:Utils.i18n("settings.actionChoices.requestRollDialog"),initiateRoll:Utils.i18n("settings.actionChoices.initiateRoll")},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"ctrlAction",{name:Utils.i18n("settings.ctrlAction.name"),hint:Utils.i18n("settings.ctrlAction.hint"),scope:"world",config:!0,type:String,default:"nothing",choices:{nothing:Utils.i18n("settings.actionChoices.nothing"),requestRoll:Utils.i18n("settings.actionChoices.requestRoll"),requestRollDialog:Utils.i18n("settings.actionChoices.requestRollDialog"),initiateRoll:Utils.i18n("settings.actionChoices.initiateRoll")},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"altAction",{name:Utils.i18n("settings.altAction.name"),hint:Utils.i18n("settings.altAction.hint"),scope:"world",config:!0,type:String,default:"nothing",choices:{nothing:Utils.i18n("settings.actionChoices.nothing"),requestRoll:Utils.i18n("settings.actionChoices.requestRoll"),requestRollDialog:Utils.i18n("settings.actionChoices.requestRollDialog"),initiateRoll:Utils.i18n("settings.actionChoices.initiateRoll")},onChange:e=>{onChangeFunction()}}),Logger.debug("Settings Registered")};Hooks.on("ready",(async()=>{Hooks.callAll(e.LCCNAME+"Initialized"),Logger.info("Ready")})),Hooks.once("init",(()=>{registerSettings(),Logger.debug("Init Done")})),Hooks.on("canvasReady",(async()=>{Hooks.on(e.LCCNAME+"Initialized",(async()=>{const e=Utils.getSetting("gmOnly");game.gmTokenTools||(game.gmTokenTools=new GmTokenToolsApi,await game.gmTokenTools.init(),Logger.debug("gmTokenTools API registered as game.gmTokenTools")),game.user.isGM?Hooks.on("renderTokenHUD",((e,t,o)=>{game.gmTokenTools.gmTokenTools.addTokenInfos(e,t,o),game.gmTokenTools.gmTokenTools.addTokenActions(e,t,o)})):e||Hooks.on("renderTokenHUD",((e,t,o)=>{game.gmTokenTools.gmTokenTools.addTokenInfos(e,t,o)})),Hooks.on("updateToken",((e,t,o)=>{Object.hasOwn(o,"y")||Object.hasOwn("diff","x")||Logger.debug(updateToken)}))}))}));export{GmTokenTools,GmTokenToolsApi,Logger,e as MODULE,Utils,registerSettings};
