const e={ID:"gm-token-tools",NAME:"Gamemaster Token Tools for DSA5",LCCNAME:"gmTokenTools"};class Logger{static info(t,a=!1){console.log(e.NAME+` Info | ${t}`),a&&ui.notifications.info(e.NAME+` | ${t}`)}static error(t,a=!1){console.error(e.NAME+` Error | ${t}`),a&&ui.notifications.error(e.NAME+` | ${t}`)}static debug(t,a){if(game.gmTokenTools?game.gmTokenTools.isDebug:Utils.getSetting("debug",!1)){if(!a)return void console.log(e.NAME+` Debug | ${t}`);const i=Utils.deepClone(a);console.log(e.NAME+` Debug | ${t}`,i)}}}class Utils{static collectOptions(e,t){let a,i,o={};for(let l in t.options){let n=t.options[l];switch(o[l]={},n.type){case"number":a=e.find("input#"+l+"[type=number]")?.val(),a=Math.min(Math.max(n.range.min,a),n.range.max),o[l].val=a;break;case"chooseOne":i=e.find("select#"+l+" option:selected"),o[l].val=i.val(),i.attr("data-modtext")&&(o[l].mod=Utils.i18n(i.attr("data-modtext")));break;case"boolean":i=e.find("input#"+l+"[type=checkbox]"),i.is(":checked")?(o[l].val=n.values.true.value,i.attr("data-modtext")&&(o[l].mod=Utils.i18n(i.attr("data-modtext")))):o[l].val=n.values.false.value}if(void 0!==n.format){const e=Handlebars.compile(n.format);o[l].val=e({value:o[l].val})}}return e.find("input#manual[type=number]")&&(a=e.find("input#manual[type=number]").val(),0!=a&&(o.manual={val:a,mod:Utils.i18n("damage.manualModifier.labelMod")+": "+(a>0?"+":"")+a})),Logger.debug("Collected options from dialog",o),o}static isBitSet(e,t){return 0!=(e&1<<t)}static deepClone(e,t){return deepClone(e,t)}static getActor(e,t){let a=null;return t&&(a=canvas.tokens.placeables.find((e=>e.id===t))),a?a.actor:game.actors.get(e)}static getItem(e,t){return e.items.get(t)}static getToken(e){return canvas.tokens.placeables.find((t=>t.id===e))}static getControlledTokens(){return game.canvas.tokens.controlled}static getControlledToken(){return game.canvas.tokens.controlled[0]}static getUserByTokenId(e){let t,a=e.actor.ownership;return game.users.forEach((e=>{null!==e.character&&e.active&&a[e._id]>0&&(t=e)})),t}static getSetting(t,a=null){let i=a??null;try{i=game.settings.get(e.ID,t)}catch{console.log(e.NAME+` Debug | GameConfig '${t}' not found`)}return i}static async setSetting(t,a){game.settings.settings.get(`${e.ID}.${t}`)?(await game.settings.set(e.ID,t,a),Logger.debug(`GameConfig '${t}' set to '${a}'`)):Logger.debug(`GameConfig '${t}' not found`)}static getUserFlag(t){return game.user.getFlag(e.ID,t)}static async setUserFlag(t,a){await game.user.setFlag(e.ID,t,a)}static async unsetUserFlag(t){await game.user.unsetFlag(e.ID,t)}static i18n(e,t=null){let a=game.i18n.localize(e);return a==e?(null==t&&(a=e),a):a}static isModuleActive(e){const t=game.modules.get(e);return t&&t.active}}class GmTokenTools extends Application{async init(){this.updateSettings(),Logger.debug("Application Initialized")}updateSettings(){Logger.debug("Updating Settings..."),this.isDebug=Utils.getSetting("debug"),this.chatToTarget=Utils.getSetting("chatToTarget"),this.defaultAction=Utils.getSetting("defaultAction"),this.ctrlAction=Utils.getSetting("ctrlAction"),this.altAction=Utils.getSetting("altAction"),Logger.debug("Settings Updated")}}const t={damageTypes:{fall:{name:"damage.fall.name",description:"damage.fall.description",options:{hight:{label:"damage.fall.hight",unit:"gridUnits",type:"number",range:{min:1,max:20},defValue:1,format:"{{value}}d6[black]"},impact:{label:"damage.fall.ground",unit:"SP",type:"chooseOne",options:{softest:{name:"damage.fall.softest",value:"-4",modText:"damage.fall.softestMod"},softer:{name:"damage.fall.softer",value:"-3",modText:"damage.fall.softerMod"},soft:{name:"damage.fall.soft",value:"-2",modText:"damage.fall.softMod"},bitsoft:{name:"damage.fall.bitsoft",value:"-1",modText:"damage.fall.bitsoftMod"},normal:{name:"damage.fall.normal",value:"0"},bithard:{name:"damage.fall.bithard",value:"1",modText:"damage.fall.bithardMod"},hard:{name:"damage.fall.hard",value:"2",modText:"damage.fall.hardMod"},harder:{name:"damage.fall.harder",value:"3",modText:"damage.fall.harderMod"},hardest:{name:"damage.fall.hardest",value:"4",modText:"damage.fall.harderMod"}},defValue:"normal"}},formula:"(@hight + @impact) + @manual",manualModification:!0},burn:{name:"damage.burn.name",description:"damage.burn.description",options:{area:{label:"damage.burn.areaLabel",type:"chooseOne",defValue:"small",options:{small:{name:"damage.burn.areaSmall",value:"1d3"},medium:{name:"damage.burn.areaMedium",value:"1d6"},large:{name:"damage.burn.areaLarge",value:"2d6"}},format:"{{value}}[black]"},extreme:{label:"damage.burn.extremeLabel",unit:"damage.burn.extremeUnit",type:"boolean",values:{true:{value:2,modText:"damage.burn.extremeMod"},false:{value:1}}}},formula:"(@area * @extreme) + @manual",manualModification:!0}}};class DamageHandler{static async rollDamageForToken(e){let t=Utils.getToken(e);if(void 0===t)return;let a=await new Roll("1d6[black]").evaluate({async:!0});game.dice3d?.showForRoll(a);let i=Math.max(0,a.total);t.actor.applyDamage(damagePointsl);let o=Handlebars.compile(Utils.i18n("actions.damageRoll.chatHb"))({name:t.actor.name,roll:i});ChatMessage.create({user:game.user._id,content:o})}static async doDamageRoll(t,a,i){Logger.debug("doDamageRoll",{token:t,damage:a,options:i});let o={};for(let e in i)o[e]=i[e].val;let l=new Roll(a.formula,o);await l.evaluate({async:!0}),game.dice3d?.showForRoll(l);let n=Math.max(0,l.total);t.actor.applyDamage(n);let s=[],r=l.total;for(let e in l.dice)for(let t=0;t<l.dice[e].number;t++)s.push({die:"d"+l.dice[e].faces,value:l.dice[e].results[t].result}),r-=l.dice[e].results[t].result;let c=[];for(let e in i)void 0!==i[e].mod&&c.push(i[e].mod);const g=await renderTemplate("modules/"+e.ID+"/templates/damageRollResultChat.hbs",{name:t.actor.name,roll:n,dice:s,damageType:a.name,modifier:r,modifiers:c});ChatMessage.create({user:game.user._id,content:g})}static async handleDamageRoll(a,i,o){if(Logger.debug("handleDamageRoll",{token:a,value:i,mod:o}),void 0===t.damageTypes[i])return;let l=t.damageTypes[i],n={damageHeader:Utils.i18n(l.name)+" Wurf fÃ¼r "+a.actor.name,damageDescription:l.description,options:[]};for(let e in l.options){let t=l.options[e];switch(t.type){case"number":n.options.push({type:"number",id:e,label:t.label,min:t.range.min,max:t.range.max,value:t.defValue,unit:t.unit});break;case"chooseOne":let a=[];for(let e in t.options){let i={};e==t.defValue&&(i.selected=!0),void 0!==t.options[e].modText&&(i.modText=t.options[e].modText),i.value=t.options[e].value,i.name=t.options[e].name,a.push(i)}n.options.push({type:"chooseOne",id:e,label:t.label,choices:a});break;case"boolean":let i={type:"boolean",id:e,label:t.label};void 0!==t.values.true.modText&&(i.modText=t.values.true.modText),n.options.push(i);break;default:Logger.debug("Invalid configuration",l)}}void 0!==l.manualModification&&l.manualModification&&n.options.push({type:"number",id:"manual",label:"damage.manualModifier.label",value:0}),Logger.debug("DamageRollDialog",n);const s=await renderTemplate("modules/"+e.ID+"/templates/damageRollDialog.hbs",n);new game.dsa5.apps.DSA5Dialog({title:"Schadensprobe auf "+Utils.i18n(l.name)+" anfordern",content:s,buttons:{ok:{label:"Ja",callback:e=>{DamageHandler.doDamageRoll(a,l,Utils.collectOptions(e,l))}},cancel:{label:"Abbrechen"}}},{width:700,resizable:!1}).render(!0)}}class SkillHandler{static requestRoll(e,t,a,i,o){const l=i<0?` ${i}`:i>0?` +${i}`:"",n=game.i18n.format("actions.requestRoll",{user:game.user.name,item:`<a class="roll-button request-roll" data-type="${t}" data-modifier="${i}" data-name="${a}"><i class="fas fa-dice"></i> ${a}${l}</a>`});let s={user:game.user._id,content:n};if("alwaysUser"==game.gmTokenTools._gtt.chatToTarget||"shiftEveryoneElseUser"==game.gmTokenTools._gtt.chatToTarget&&!o||"shiftUserElseEveryone"==game.gmTokenTools._gtt.chatToTarget&&o){let t=Utils.getUserByTokenId(e);if(void 0===t)return;mergeObject(s,{whisper:[t]})}ChatMessage.create(s)}static async requestRollDialog(t,a,i,o){const l=game.i18n.format("actions.requestRollDialog.content",{skill:i}),n=await renderTemplate("modules/"+e.ID+"/templates/requestRollDialog.hbs",{text:l});new game.dsa5.apps.DSA5Dialog({title:Utils.i18n("actions.requestRollDialog.title"),content:n,buttons:{ok:{label:"Ja",callback:e=>{const l=e.find('input[name="entryselection"]').val();SkillHandler.requestRoll(t,a,i,l,o)}},cancel:{label:"Abbrechen"}}}).render(!0)}static async handleRoll(e,t,a,i){let o,l;"attribute"==t?(o=game.dsa5.apps.DSA5_Utility.attributeLocalization(a),l=a):"skill"==t&&(l=await game.dsa5.apps.DSA5_Utility.skillByName(a),o=a);let n="nothing";switch(n=Utils.isBitSet(i,0)?game.gmTokenTools._gtt.ctrlAction:Utils.isBitSet(i,1)?game.gmTokenTools._gtt.altAction:game.gmTokenTools._gtt.defaultAction,n){case"requestRoll":Logger.debug("Requesting roll",{token:e,type:t,id:o,skillAttrObj:l}),SkillHandler.requestRoll(e,t,o,0,Utils.isBitSet(i,2));break;case"requestRollDialog":Logger.debug("Requesting roll Dialog",{token:e,type:t,id:o,skillAttrObj:l}),SkillHandler.requestRollDialog(e,t,o,Utils.isBitSet(i,2));break;case"initiateRoll":Logger.debug("Initiae Roll",{token:e,type:t,id:o,skillAttrObj:l}),"skill"==t?e.actor.setupSkill(l,{},e._id).then((t=>{e.actor.basicTest(t)})):"attribute"==t&&e.actor.setupCharacteristic(l,{},e._id).then((t=>{e.actor.basicTest(t)}))}}}class GmTokenToolsApi{isDebug=!1;_gtt=void 0;async init(){this.isDebug=Utils.getSetting("debug"),void 0===this._gtt&&(this._gtt=new GmTokenTools,this._gtt.init()),Logger.info("API Initialized")}updateSettings(){this._gtt?.updateSettings()}handleClick(e){let t=e.getAttribute("data-id"),a=e.parentElement.getAttribute("data-type"),i=e.parentElement.getAttribute("data-token"),o=Utils.getToken(i);if(void 0===o)return;let l=0;window.event.ctrlKey&&(l+=1),window.event.altKey&&(l+=2),window.event.shiftKey&&(l+=4),"attribute"==a||"skill"==a?SkillHandler.handleRoll(o,a,t,l):"damage"==a?DamageHandler.handleDamageRoll(o,t,l):Logger.debug("handleClick(): unknown how to handle parameters",{clickId:t,clickType:a,clickToken:i,modifier:l})}}class Hud{static async addTokenActions(e,a,i){let o=canvas.tokens.get(i._id).actor;if(void 0===o)return;let l=[];for(let e of o.items)switch(e.type){case"adventage":case"disadventage":case"specialability":case"combatskill":break;case"skill":e.system.talentValue.value>0&&l.push({name:e.name,value:e.system.talentValue.value})}let n="",s="";l.sort(((e,t)=>t.value-e.value));for(let e of l)s+='<li onClick="game.gmTokenTools.handleClick(this);" data-id="'+e.name+'">('+e.value+") "+e.name+"</li>";n+='<div class="control-icon token-tool-icon" title="Roll Checks"><i class="fas fa-dice"></i> '+Utils.i18n("actions.skills.name")+'</div><div class="token-tool-list-wrapper"><ul class="token-tool-list" data-type="skill" data-token="'+i._id+'">'+s+"</ul></div>";let r="",c=["mu","kl","in","ch","ff","ge","ko","kk"];for(let e of c)r+='<li onClick="game.gmTokenTools.handleClick(this);" data-id="'+e+'">('+o.system.characteristics[e].value+") "+game.dsa5.apps.DSA5_Utility.attributeLocalization(e)+"</li>";n+='<div class="control-icon token-tool-icon" title="Roll Checks"><i class="fas fa-dice"></i> '+Utils.i18n("actions.attributes.name")+'</div><div class="token-tool-list-wrapper"><ul class="token-tool-list" data-type="attribute" data-token="'+i._id+'">'+r+"</ul></div>";let g="";g+="<li onClick=\"game.gmTokenTools.rollDamageForToken('"+i._id+"'); return false;\">1d6 Schaden</li>";for(let e in t.damageTypes)g+='<li onClick="game.gmTokenTools.handleClick(this);" data-id="'+e+'">'+Utils.i18n(t.damageTypes[e].name)+"</li>";switch(g+="<li onClick=\"game.dsa5.macro.requestRoll('Regeneration', 0);\">Regenerieren</li>",n+='<div class="control-icon token-tool-icon" title="Roll Checks"><i class="fas fa-dice"></i> Specials</div><div class="token-tool-list-wrapper"><ul class="token-tool-list" data-type="damage" data-token="'+i._id+'">'+g+"</ul></div>",n+='<div class="control-icon token-tool-icon token-tool-hint">',"nothing"!=this.defaultAction&&(n+='<i class="fas fa-solid fa-computer-mouse"></i> '+Utils.i18n("settings.actionChoices."+this.defaultAction)+"</br>"),"nothing"!=this.ctrlAction&&(n+='<i class="fas fa-solid fa-computer-mouse"></i>+<span class="key">Ctrl</span> '+Utils.i18n("settings.actionChoices."+this.ctrlAction)+"</br>"),"nothing"!=this.altAction&&(n+='<i class="fas fa-solid fa-computer-mouse"></i>+<span class="key">Alt</span> '+Utils.i18n("settings.actionChoices."+this.altAction)+"</br>"),this.chatToTarget){case"alwaysEveryone":case"alwaysUser":n+='<i class="fas fa-solid fa-comment"></i> '+Utils.i18n("settings.chatToTarget.choices."+this.chatToTarget)+"</br>";break;case"shiftEveryoneElseUser":case"shiftUserElseEveryone":n+='<i class="fas fa-solid fa-comment"></i> '+Utils.i18n("settings.chatToTarget.choices.alwaysUser")+', <span class="key">Shift</span> '+Utils.i18n("settings.chatToTarget.choices.shiftEveryoneElseUser")+"</br>"}n+="</div>";let d=$(`<div class="col token-tool-column-right">${n}</div>`);a.find(".col.right").wrap('<div class="token-tool-container">'),a.find(".col.right").before(d),Logger.debug("Actions injected to token HUD")}static async addTokenInfos(e,t,a){let i=Utils.getActor(null,a._id);if(void 0===i)return;let o="",l=i.system.status.speed.max;o+='<div class="control-icon token-tool-icon" title="'+Utils.i18n("infos.speed.name")+": "+l+'"><i class="fas fa-walking"></i> '+l+"</div>";let n="-";n="creature"==i.type?"crt":"npc"==i.type?"npc":"character"==i.type?i.system.details.experience.total:"-",o+='<div class="control-icon token-tool-icon" title="'+Utils.i18n("infos.expTotal.name")+": "+n+'"><i class="fas fa-solid fa-scroll"></i> '+n+"</div>";o+='<div class="control-icon token-tool-icon" title="'+Utils.i18n("infos.acTotal.name")+': 0"><i class="fas fa-shield-alt"></i> 0</div>';let s=$(`<div class="col token-tool-column-left">${o}</div>`);t.find(".col.left").wrap('<div class="token-tool-container">'),t.find(".col.left").before(s),Logger.debug("Infos injected into token HUD")}}function onChangeFunction(t){game[e.LCCNAME]&&game[e.LCCNAME].updateSettings()}const registerSettings=function(){game.settings.register(e.ID,"startup",{name:"One-Time Startup Prompt",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register(e.ID,"debug",{name:Utils.i18n("settings.debug.name"),hint:Utils.i18n("settings.debug.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"gmOnly",{name:Utils.i18n("settings.gmOnly.name"),hint:Utils.i18n("settings.gmOnly.hint"),scope:"world",config:!0,default:!0,type:Boolean,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"showCombatSkills",{name:Utils.i18n("settings.showCombatSkills.name"),hint:Utils.i18n("settings.showCombatSkills.hint"),scope:"world",config:!0,default:!1,type:Boolean,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"chatToTarget",{name:Utils.i18n("settings.chatToTarget.name"),hint:Utils.i18n("settings.chatToTarget.hint"),scope:"world",config:!0,type:String,default:"alwaysEveryone",choices:{alwaysEveryone:Utils.i18n("settings.chatToTarget.choices.alwaysEveryone"),alwaysUser:Utils.i18n("settings.chatToTarget.choices.alwaysUser"),shiftEveryoneElseUser:Utils.i18n("settings.chatToTarget.choices.shiftEveryoneElseUser"),shiftUserElseEveryone:Utils.i18n("settings.chatToTarget.choices.shiftUserElseEveryone")},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"defaultAction",{name:Utils.i18n("settings.defaultAction.name"),hint:Utils.i18n("settings.defaultAction.hint"),scope:"world",config:!0,type:String,default:"requestRoll",choices:{nothing:Utils.i18n("settings.actionChoices.nothing"),requestRoll:Utils.i18n("settings.actionChoices.requestRoll"),requestRollDialog:Utils.i18n("settings.actionChoices.requestRollDialog"),initiateRoll:Utils.i18n("settings.actionChoices.initiateRoll")},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"ctrlAction",{name:Utils.i18n("settings.ctrlAction.name"),hint:Utils.i18n("settings.ctrlAction.hint"),scope:"world",config:!0,type:String,default:"nothing",choices:{nothing:Utils.i18n("settings.actionChoices.nothing"),requestRoll:Utils.i18n("settings.actionChoices.requestRoll"),requestRollDialog:Utils.i18n("settings.actionChoices.requestRollDialog"),initiateRoll:Utils.i18n("settings.actionChoices.initiateRoll")},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"altAction",{name:Utils.i18n("settings.altAction.name"),hint:Utils.i18n("settings.altAction.hint"),scope:"world",config:!0,type:String,default:"nothing",choices:{nothing:Utils.i18n("settings.actionChoices.nothing"),requestRoll:Utils.i18n("settings.actionChoices.requestRoll"),requestRollDialog:Utils.i18n("settings.actionChoices.requestRollDialog"),initiateRoll:Utils.i18n("settings.actionChoices.initiateRoll")},onChange:e=>{onChangeFunction()}}),Logger.debug("Settings Registered")};Hooks.on("ready",(async()=>{Hooks.callAll(e.LCCNAME+"Initialized"),Logger.info("Ready")})),Hooks.once("init",(()=>{registerSettings(),Logger.debug("Init Done")})),Hooks.on("canvasReady",(async()=>{Hooks.on(e.LCCNAME+"Initialized",(async()=>{const e=Utils.getSetting("gmOnly");game.gmTokenTools||(game.gmTokenTools=new GmTokenToolsApi,await game.gmTokenTools.init(),Logger.debug("gmTokenTools API registered as game.gmTokenTools")),game.user.isGM?Hooks.on("renderTokenHUD",((e,t,a)=>{Hud.addTokenInfos(e,t,a),Hud.addTokenActions(e,t,a)})):e||Hooks.on("renderTokenHUD",((e,t,a)=>{Hud.addTokenInfos(e,t,a)})),Hooks.on("updateToken",((e,t,a)=>{Object.hasOwn(a,"y")||Object.hasOwn("diff","x")||Logger.debug(updateToken)}))}))}));export{DamageHandler,GmTokenTools,GmTokenToolsApi,Hud,Logger,e as MODULE,SkillHandler,Utils,registerSettings};
// Manual